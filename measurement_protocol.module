<?php
/**
 * Google Measurement Protocol module.
 */

/**
 * undocumented function
 *
 * @param string $data 
 * @return void
 * @author Nicholas Vahalik
 */
function measurement_protocol_create_create_payload($data) {

  // Grab this from the googlanalytics module.
  $payload['tid'] = variable_get('googleanalytics_account', '');

  if ($payload['tid'] === '') {
    return NULL;
  }

  $map = array(
    'title' => 'dt', 'page' => 'dp', 'referrer' => 'dr',
    'type' => 't',   't' => 't',     'ec' => 'ec',
    'ea' => 'ea',    'el' => 'el',   'ev' => 'ev',
  );

  $payload['v'] = 1;
  $payload['cid'] = measurement_protocol_get_cookie();

  foreach ($map as $data_key => $payload_key) {
    if (isset($data[$data_key])) {
      $payload[$payload_key] = $data[$data_key];
    }
  }

  return $payload;
}

function measurement_protocol_send_action($data) {
  if ($data !== NULL) {
    // We pass the '&' because on some servers it defaults to '&amp;';
    $reqeust_data = http_build_query($data, '', '&');
    watchdog('measurement', print_r($reqeust_data, TRUE), array(), WATCHDOG_DEBUG);
    $retval =  drupal_http_request('https://ssl.google-analytics.com/collect', array('method' => 'POST', 'data' => $reqeust_data));
    return $retval;
  }
}

function mpt($data) {
  $data = measurement_protocol_create_create_payload($data);
  measurement_protocol_send_action($data);
}

function mptph($data) {
  $data['t'] = 'pageview';
  mpt($data);
}

function mpte($category, $action, $label = NULL, $value = NULL, $data = array()) {
  $data['t'] = 'event';
  $data['ec'] = $category;
  $data['ea'] = $action;
  if (isset($label)) {
    $data['el'] = $label;
  }
  if (isset($value)) {
    $data['ev'] = $value;
  }
  mpt($data);
}

function measurement_protocol_get_cookie() {
  if (isset($_COOKIE['_ga'])) {
    return $cid1 . '.' . $cid2;
  }
  else {
    return 555; // measurement_protocol_gen_uuid();
  }
}

function measurement_protocol_gen_uuid() {
    return sprintf( '%04x%04x-%04x-%04x-%04x-%04x%04x%04x',
        // 32 bits for "time_low"
        mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff ),

        // 16 bits for "time_mid"
        mt_rand( 0, 0xffff ),

        // 16 bits for "time_hi_and_version",
        // four most significant bits holds version number 4
        mt_rand( 0, 0x0fff ) | 0x4000,

        // 16 bits, 8 bits for "clk_seq_hi_res",
        // 8 bits for "clk_seq_low",
        // two most significant bits holds zero and one for variant DCE1.1
        mt_rand( 0, 0x3fff ) | 0x8000,

        // 48 bits for "node"
        mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff )
    );
}
