<?php
/**
 * @file
 * Google Measurement Protocol module.
 */

/**
 * Create a payload that will go to Google's collection service.
 *
 * Ideally, you wouldn't use this function, but you'd use one of the many
 * helper functions that are better suited to their individual tasks.
 *
 * @param array $data
 *   An array containing one or more data keys. See the below functions for
 *   more information on how to use.
 *
 * @see mptph()
 * @see mpte()
 *
 * @return array
 *   The prepared payload, ready to be sent to Google. If null is returned,
 *   then the account was not set.
 */
function measurement_protocol_create_create_payload($data) {

  // Grab this from the googlanalytics module.
  $payload['tid'] = variable_get('googleanalytics_account', '');

  if ($payload['tid'] === '') {
    return NULL;
  }

  $map = array(
    'title' => 'dt',
    'page' => 'dp',
    'referrer' => 'dr',
    'type' => 't',
    't' => 't',
    'ec' => 'ec',
    'ea' => 'ea',
    'el' => 'el',
    'ev' => 'ev',
  );

  $payload['v'] = 1;
  $payload['cid'] = measurement_protocol_get_cookie();

  foreach ($map as $data_key => $payload_key) {
    if (isset($data[$data_key]) && $data[$data_key] != '') {
      $payload[$payload_key] = $data[$data_key];
    }
  }

  return $payload;
}

/**
 * Sends an action to Google's collection service.
 *
 * Returns the response that drupal_http_request() returns.
 *
 * @param array $data
 *   A data array containing a prepared payload.
 *
 * @return object
 *   The response from drupal_http_request().
 */
function measurement_protocol_send_action($data) {
  if ($data !== NULL) {
    // We pass the '&' because on some servers it defaults to '&amp;'.
    $request_data = http_build_query($data, '', '&');
    $retval = drupal_http_request('https://ssl.google-analytics.com/collect', array('method' => 'POST', 'data' => $request_data));
    return $retval;
  }
}

/**
 * Build and send an MP payload.
 *
 * Takes data as it's parameter. Builds a GA payload and then sends the
 * data to the collection service. While you could use this directly, it is
 * recommended to use Helper functions.
 *
 * @param array $data
 *    An array containing keys with one or more data points to send to Google.
 */
function mpt($data) {
  $data = measurement_protocol_create_create_payload($data);
  $response = measurement_protocol_send_action($data);
  if (is_object($response) && $response->code !== 200) {
    watchdog('measurement', 'Error (%code): %message<br/>Error: %error<br/>Request Payload: %req', array(
      '%code' => $response->code,
      '%message' => $response->status_message,
      '%error' => $response->error,
      '%req' => $response->request,
    ), WATCHDOG_ERROR);
  }
}

/**
 * Track a page hit with Google Analytics.
 *
 * @param array $data
 *   (required) An array describes the page hit:
 *   - title: The title of the page.
 *   - referrer: The referring URL.
 *   - page: Path to the page tracked.
 */
function mptph($data) {
  $data['t'] = 'pageview';
  mpt($data);
}

/**
 * Track an event with Google Analytics.
 *
 * @param string $category
 *   The event category.
 * @param string $action
 *   The event action.
 * @param string $label
 *   The event label.
 * @param int $value
 *   (optional) The event value.
 * @param array $data
 *   (optional) Extra data to send with the event.
 */
function mpte($category, $action, $label = NULL, $value = NULL, $data = array()) {
  $data['t'] = 'event';
  $data['ec'] = $category;
  $data['ea'] = $action;
  if (isset($label)) {
    $data['el'] = $label;
  }
  if (isset($value)) {
    $data['ev'] = $value;
  }
  mpt($data);
}

/**
 * Grabs the cookie from the existing session if it is available.
 *
 * If it is not available, then we generate one or pass the anonymous CID.
 * This is currently the only supported method.
 *
 * @return string
 *   Returns some sort of cookie value. I'm not sure where these values come
 *   from honestly. Maybe the googleanalytics module...
 */
function measurement_protocol_get_cookie() {
  if (isset($_COOKIE['_ga'])) {
    return $cid1 . '.' . $cid2;
  }
  else {
    return (variable_get('measurement_protocol_uuid_anon', 'anon') == 'anon' ? 555 : measurement_protocol_gen_uuid());
  }
}

/**
 * Generates a UUID.
 *
 * @return string
 *   A string containing a UUID.
 *
 * @see http://www.php.net/manual/en/function.uniqid.php#94959
 */
function measurement_protocol_gen_uuid() {
  return sprintf('%04x%04x-%04x-%04x-%04x-%04x%04x%04x',
    // 32 bits for "time_low".
    mt_rand(0, 0xffff), mt_rand(0, 0xffff),
    // 16 bits for "time_mid".
    mt_rand(0, 0xffff),
    // 16 bits for "time_hi_and_version".
    // four most significant bits holds version number 4.
    mt_rand(0, 0x0fff) | 0x4000,
    // 16 bits, 8 bits for "clk_seq_hi_res".
    // 8 bits for "clk_seq_low".
    // two most significant bits holds zero and one for variant DCE1.1.
    mt_rand(0, 0x3fff) | 0x8000,
    // 48 bits for "node".
    mt_rand(0, 0xffff), mt_rand(0, 0xffff), mt_rand(0, 0xffff)
  );
}
